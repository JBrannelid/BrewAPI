// <auto-generated />
using System;
using BrewAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BrewAPI.Migrations
{
    [DbContext(typeof(BrewAPIDbContext))]
    [Migration("20250917192621_RemoveCustomerUniqueConstraints")]
    partial class RemoveCustomerUniqueConstraints
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BrewAPI.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BookingDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("BookingTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("DurationTime")
                        .HasColumnType("time");

                    b.Property<int>("FK_CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("FK_TableId")
                        .HasColumnType("int");

                    b.Property<int>("NumberGuests")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Confirmed");

                    b.HasKey("Id");

                    b.HasIndex("FK_CustomerId");

                    b.HasIndex("FK_TableId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookingDate = new DateOnly(2025, 9, 15),
                            BookingTime = new TimeOnly(18, 30, 0),
                            DurationTime = new TimeSpan(0, 2, 0, 0, 0),
                            FK_CustomerId = 1,
                            FK_TableId = 1,
                            NumberGuests = 2,
                            Status = "Confirmed"
                        },
                        new
                        {
                            Id = 2,
                            BookingDate = new DateOnly(2025, 9, 16),
                            BookingTime = new TimeOnly(19, 0, 0),
                            DurationTime = new TimeSpan(0, 2, 0, 0, 0),
                            FK_CustomerId = 2,
                            FK_TableId = 3,
                            NumberGuests = 4,
                            Status = "Confirmed"
                        });
                });

            modelBuilder.Entity("BrewAPI.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "test@exempel.com",
                            Name = "Test Testsson",
                            PhoneNumber = "070-1234567"
                        },
                        new
                        {
                            Id = 2,
                            Email = "tian@exempel.com",
                            Name = "Tian Tiansson",
                            PhoneNumber = "076-1234567"
                        });
                });

            modelBuilder.Entity("BrewAPI.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValue("https://plus.unsplash.com/premium_photo-1661349883108-3aea72f4a83f?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MXx8ZW1wdHklMjBwbGF0ZXxlbnwwfHwwfHx8MA%3D%3D");

                    b.Property<bool>("IsPopular")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(7,2)");

                    b.HasKey("Id");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Salads",
                            Description = "Handskalade räkor, bacon, cocktailtomat, rostade kruttonger, picklad rödlök, grana padano",
                            ImageUrl = "https://images.unsplash.com/photo-1551248429-40975aa4de74?w=400",
                            IsPopular = true,
                            Name = "Ceasarsallad Räkor",
                            Price = 145.00m
                        },
                        new
                        {
                            Id = 2,
                            Category = "Salads",
                            Description = "Svensk kyckling, caesar dressing, rödlök, ugnsbakade cocktailtomater, parmesan, & egenrostade krutonger",
                            ImageUrl = "https://images.unsplash.com/photo-1546793665-c74683f339c1?fm=jpg&q=60&w=3000&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D?w=400",
                            IsPopular = true,
                            Name = "Ceasarsallad",
                            Price = 145.00m
                        },
                        new
                        {
                            Id = 3,
                            Category = "Salads",
                            Description = "Halstrad tonfiskfilé med sallad citron & korianderkräm",
                            ImageUrl = "https://images.unsplash.com/photo-1604909052743-94e838986d24?q=80&w=1160&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D?w=400",
                            IsPopular = false,
                            Name = "Tonfisksallad",
                            Price = 145.00m
                        },
                        new
                        {
                            Id = 4,
                            Category = "Salads",
                            Description = "Rostade valnötter, fikon, rödbetor, äpple och rädisor, cocktailtomater, honung, ärtskott.",
                            ImageUrl = "https://images.unsplash.com/photo-1540420773420-3366772f4999?w=400",
                            IsPopular = false,
                            Name = "Chevré Salad",
                            Price = 125.00m
                        },
                        new
                        {
                            Id = 5,
                            Category = "Bowls",
                            Description = "Bulgogimarinerat högrev, bakat ägg, kimchi, morötter, spenat, böngroddar, furikake, sesamfrön, gochujangsås, sojamayo",
                            ImageUrl = "https://images.unsplash.com/photo-1546069901-ba9599a7e63c?q=80&w=1160&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsPopular = true,
                            Name = "Din-Din Bap Bowl",
                            Price = 188.00m
                        },
                        new
                        {
                            Id = 6,
                            Category = "Bowls",
                            Description = "Kycklinglårfilé, ris, mango, teriyaksås, sojamajo, salladslök, togarashi, chili, soja, avokado, sojabönor, kimchi, picklad rödkål, smashed spicy cucumber",
                            ImageUrl = "https://images.unsplash.com/photo-1546069901-ba9599a7e63c?q=80&w=1160&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsPopular = false,
                            Name = "Sneaky Samurai Bowl",
                            Price = 164.00m
                        },
                        new
                        {
                            Id = 7,
                            Category = "Bowls",
                            Description = "Kycklinglårfilé, ris, mango, teriyaksås, sojamajo, salladslök, togarashi, chili, soja, avokado, sojabönor, kimchi, picklad rödkål, smashed spicy cucumber",
                            ImageUrl = "https://plus.unsplash.com/premium_photo-1705056547195-a68c45f2d77e?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MXx8Zm9vZCUyMGJvd2x8ZW58MHx8MHx8fDA%3D",
                            IsPopular = true,
                            Name = "Karaage Bowl",
                            Price = 164.00m
                        },
                        new
                        {
                            Id = 8,
                            Category = "Desserts",
                            Description = "Fransk crêpe med pistagekräm, choklad och vaniljglass",
                            ImageUrl = "https://cdn.pixabay.com/photo/2021/11/07/16/40/chocolate-6777186_1280.jpg",
                            IsPopular = true,
                            Name = "Dubai chocolate crêpe",
                            Price = 85.00m
                        },
                        new
                        {
                            Id = 9,
                            Category = "Desserts",
                            Description = "Frasig croissant bakad med smör",
                            ImageUrl = "https://images.unsplash.com/photo-1723691802547-b79f65c16b5f?q=80&w=1740&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsPopular = false,
                            Name = "Croissant",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 10,
                            Category = "Desserts",
                            Description = "Vetebulle bakad med surdeg, fylld med pumpafyllning och toppad med majssmulor.",
                            ImageUrl = "https://images.unsplash.com/photo-1589783361701-d5161a106415?q=80&w=1740&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3DY",
                            IsPopular = false,
                            Name = "Pumpkin Bun",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 11,
                            Category = "Desserts",
                            Description = "Kladdkaka som serveras med vispgrädde och vaniljglass",
                            ImageUrl = "https://images.unsplash.com/photo-1705472017435-7a820b01f36c?q=80&w=1740&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsPopular = true,
                            Name = "Mudcake",
                            Price = 65.00m
                        },
                        new
                        {
                            Id = 12,
                            Category = "Desserts",
                            Description = "En rund kak- och gräddmousse med chokladsmulor",
                            ImageUrl = "https://plus.unsplash.com/premium_photo-1695028377713-f5e5424b1e7e?q=80&w=774&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsPopular = true,
                            Name = "Moussekaka Cookies & Cream",
                            Price = 65.00m
                        },
                        new
                        {
                            Id = 13,
                            Category = "Beverages",
                            Description = "Krämig cappuccino med perfekt mjölkskum",
                            ImageUrl = "https://images.unsplash.com/photo-1509042239860-f550ce710b93?w=400",
                            IsPopular = false,
                            Name = "Cappuccino",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 14,
                            Category = "Beverages",
                            Description = "Sötat grönt matchate, serverat med kall havredryck och is",
                            ImageUrl = "https://images.unsplash.com/photo-1717603545758-88cc454db69b?q=80&w=774&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsPopular = false,
                            Name = "Ismatcha",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 15,
                            Category = "Beverages",
                            Description = "Espresso blandat med kall mjölk och is",
                            ImageUrl = "https://images.unsplash.com/photo-1517701550927-30cf4ba1dba5?q=80&w=774&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsPopular = false,
                            Name = "Iced Latte",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 16,
                            Category = "Beverages",
                            Description = "Espresso blandat med mjölk",
                            ImageUrl = "https://images.unsplash.com/photo-1574914629385-46448b767aec?q=80&w=774&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsPopular = false,
                            Name = "Latte",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 17,
                            Category = "Beverages",
                            Description = "Blonde Roast - Veranda Blend",
                            ImageUrl = "https://images.unsplash.com/photo-1610632380989-680fe40816c6?q=80&w=774&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsPopular = false,
                            Name = "Hot Coffee",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 18,
                            Category = "Beverages",
                            Description = "Vaniljshake med smak av choklad. Toppad med vispgrädde",
                            ImageUrl = "https://images.unsplash.com/photo-1572490122747-3968b75cc699?q=80&w=774&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsPopular = false,
                            Name = "Caramel Frappuccino",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 19,
                            Category = "Beverages",
                            Description = "Kaffeshake med smak av kola. Toppad med vispgrädde",
                            ImageUrl = "https://images.unsplash.com/photo-1637178035222-a08f2d4dd1a3?q=80&w=756&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsPopular = false,
                            Name = "Caramel Frappuccino",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 20,
                            Category = "Beverages",
                            Description = "Grönt, svart eller rött té i olika smaker",
                            ImageUrl = "https://plus.unsplash.com/premium_photo-1674406481284-43eba097a291?q=80&w=1740&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsPopular = false,
                            Name = "Tea Selection",
                            Price = 40.00m
                        });
                });

            modelBuilder.Entity("BrewAPI.Models.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("TableNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TableNumber")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 2,
                            IsAvailable = true,
                            TableNumber = 1
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 4,
                            IsAvailable = true,
                            TableNumber = 2
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 6,
                            IsAvailable = true,
                            TableNumber = 3
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 8,
                            IsAvailable = true,
                            TableNumber = 4
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 2,
                            IsAvailable = true,
                            TableNumber = 5
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 4,
                            IsAvailable = true,
                            TableNumber = 6
                        });
                });

            modelBuilder.Entity("BrewAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BrewAPI.Models.Booking", b =>
                {
                    b.HasOne("BrewAPI.Models.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("FK_CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrewAPI.Models.Table", "Table")
                        .WithMany("Bookings")
                        .HasForeignKey("FK_TableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("BrewAPI.Models.Customer", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BrewAPI.Models.Table", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
